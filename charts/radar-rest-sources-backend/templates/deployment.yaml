apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "radar-rest-sources-backend.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "radar-rest-sources-backend.name" . }}
    helm.sh/chart: {{ include "radar-rest-sources-backend.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "radar-rest-sources-backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "radar-rest-sources-backend.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ template "radar-rest-sources-backend.name" . }}
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: REST_SOURCE_AUTHORIZER_SOURCE_CLIENTS_FILE_PATH
            value: /etc/radar-rest-sources-backend/authorizer.yml
          - name: REST_SOURCE_AUTHORIZER_VALIDATOR
            value: "managementportal"
          - name: REST_SOURCE_AUTHORIZER_AUTH_PUBLIC_KEY_ENDPOINTS_0
            value: "http://{{ .Values.managementportal_host }}:8080/managementportal/oauth/token_key"
          - name: APP_SLEEP
            value: "10"   # gives time for the database to boot before the application
          command:
          - authorizer-app-backend
          - /etc/radar-rest-sources-backend/authorizer.yml
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /rest-sources/backend/health
              port: 8080
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /rest-sources/backend/health
              port: 8080
              httpHeaders:
                - name: Accept
                  value: application/json
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/radar-rest-sources-backend/
            {{- if .Values.postgres.ssl.enabled }}
            - name: postgres-root-cert
              mountPath: /root/.postgresql/
            {{ end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "radar-rest-sources-backend.fullname" . }}
        {{- if .Values.postgres.ssl.enabled }}
        - name: postgres-root-cert
          secret:
            secretName: {{ include "radar-rest-sources-backend.fullname" . }}-root-cert
        {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
